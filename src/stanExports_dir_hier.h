// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dir_hier_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dir_hier");
    reader.add_event(30, 28, "end", "model_dir_hier");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dir_hier
  : public stan::model::model_base_crtp<model_dir_hier> {
private:
        int n_y;
        int n_r;
        int n_x;
        std::vector<std::vector<vector_d> > X;
        double prior_loc_alpha;
        double prior_shp_alpha;
public:
    model_dir_hier(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dir_hier(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dir_hier_namespace::model_dir_hier";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n_y", "int", context__.to_vec());
            n_y = int(0);
            vals_i__ = context__.vals_i("n_y");
            pos__ = 0;
            n_y = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_y", n_y, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_r", "int", context__.to_vec());
            n_r = int(0);
            vals_i__ = context__.vals_i("n_r");
            pos__ = 0;
            n_r = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_r", n_r, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_x", "int", context__.to_vec());
            n_x = int(0);
            vals_i__ = context__.vals_i("n_x");
            pos__ = 0;
            n_x = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_x", n_x, 0);
            current_statement_begin__ = 6;
            validate_non_negative_index("X", "n_y", n_y);
            validate_non_negative_index("X", "n_x", n_x);
            validate_non_negative_index("X", "n_r", n_r);
            context__.validate_dims("data initialization", "X", "vector_d", context__.to_vec(n_x,n_r,n_y));
            X = std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > >(n_x, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_r, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_y)));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_1_max__ = n_y;
            size_t X_k_0_max__ = n_x;
            size_t X_k_1_max__ = n_r;
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                for (size_t k_1__ = 0; k_1__ < X_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                        X[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                    }
                }
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "prior_loc_alpha", "double", context__.to_vec());
            prior_loc_alpha = double(0);
            vals_r__ = context__.vals_r("prior_loc_alpha");
            pos__ = 0;
            prior_loc_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_loc_alpha", prior_loc_alpha, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "prior_shp_alpha", "double", context__.to_vec());
            prior_shp_alpha = double(0);
            vals_r__ = context__.vals_r("prior_shp_alpha");
            pos__ = 0;
            prior_shp_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_shp_alpha", prior_shp_alpha, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 13;
            validate_non_negative_index("alpha", "n_y", n_y);
            validate_non_negative_index("alpha", "n_r", n_r);
            num_params_r__ += (n_y * n_r);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dir_hier() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 13;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_y", n_y);
        validate_non_negative_index("alpha", "n_r", n_r);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(n_r,n_y));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha(n_r, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_y));
        size_t alpha_j_1_max__ = n_y;
        size_t alpha_k_0_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                alpha[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t alpha_i_0_max__ = n_r;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.vector_lb_unconstrain(1, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 13;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > alpha;
            size_t alpha_d_0_max__ = n_r;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.vector_lb_constrain(1, n_y, lp__));
                else
                    alpha.push_back(in__.vector_lb_constrain(1, n_y));
            }
            // model body
            {
            current_statement_begin__ = 17;
            local_scalar_t__ sum_alpha(DUMMY_VAR__);
            (void) sum_alpha;  // dummy to suppress unused var warning
            stan::math::initialize(sum_alpha, DUMMY_VAR__);
            stan::math::fill(sum_alpha, DUMMY_VAR__);
            current_statement_begin__ = 18;
            for (int k = 1; k <= n_r; ++k) {
                current_statement_begin__ = 19;
                lp_accum__.add((-(n_x) * sum(stan::math::lgamma(get_base1(alpha, k, "alpha", 1)))));
                current_statement_begin__ = 20;
                stan::math::assign(sum_alpha, sum(get_base1(alpha, k, "alpha", 1)));
                current_statement_begin__ = 21;
                lp_accum__.add((n_x * (stan::math::lgamma(sum_alpha) - stan::math::lgamma((sum_alpha + n_y)))));
                current_statement_begin__ = 22;
                for (int i = 1; i <= n_x; ++i) {
                    current_statement_begin__ = 23;
                    lp_accum__.add(sum(stan::math::lgamma(add(get_base1(get_base1(X, i, "X", 1), k, "X", 2), get_base1(alpha, k, "alpha", 1)))));
                }
                current_statement_begin__ = 26;
                lp_accum__.add(gamma_log<propto__>(get_base1(alpha, k, "alpha", 1), prior_shp_alpha, (prior_shp_alpha / prior_loc_alpha)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_r);
        dims__.push_back(n_y);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dir_hier_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > alpha;
        size_t alpha_d_0_max__ = n_r;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.vector_lb_constrain(1, n_y));
        }
        size_t alpha_j_1_max__ = n_y;
        size_t alpha_k_0_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                vars__.push_back(alpha[k_0__](j_1__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dir_hier";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = n_y;
        size_t alpha_k_0_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_j_1_max__ = n_y;
        size_t alpha_k_0_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "alpha" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_dir_hier_namespace::model_dir_hier stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
