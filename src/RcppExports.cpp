// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbs_me
arma::mat gibbs_me(int iter, int warmup, const arma::uvec& S, const arma::uvec& GZ, const arma::mat& M_sr, const arma::mat& N_gzr, const arma::mat& alpha_gzr, const arma::mat& beta_sr, int verbosity);
RcppExport SEXP _birdie_gibbs_me(SEXP iterSEXP, SEXP warmupSEXP, SEXP SSEXP, SEXP GZSEXP, SEXP M_srSEXP, SEXP N_gzrSEXP, SEXP alpha_gzrSEXP, SEXP beta_srSEXP, SEXP verbositySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type GZ(GZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_sr(M_srSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N_gzr(N_gzrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha_gzr(alpha_gzrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta_sr(beta_srSEXP);
    Rcpp::traits::input_parameter< int >::type verbosity(verbositySEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_me(iter, warmup, S, GZ, M_sr, N_gzr, alpha_gzr, beta_sr, verbosity));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_birdie_gibbs_me", (DL_FUNC) &_birdie_gibbs_me, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_birdie(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
