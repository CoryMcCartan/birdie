// Generated by rstantools.  Do not edit by hand.

/*
    race-proxy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    race-proxy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with race-proxy.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_model_distr_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_model_distr");
    reader.add_event(74, 72, "end", "model_model_distr");
    return reader;
}
#include <stan_meta_header.hpp>
class model_model_distr
  : public stan::model::model_base_crtp<model_model_distr> {
private:
        int N;
        int n_x;
        int n_r;
        int n_gz;
        int n_s;
        std::vector<int> X;
        std::vector<int> S;
        std::vector<int> GZ;
        matrix_d p_sr;
        matrix_d p_gzr;
        vector_d p_r;
        vector_d p_gz;
        double n_prior_obs;
        std::vector<vector_d> pr_base;
        vector_d alpha;
public:
    model_model_distr(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_model_distr(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_model_distr_namespace::model_model_distr";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "n_x", "int", context__.to_vec());
            n_x = int(0);
            vals_i__ = context__.vals_i("n_x");
            pos__ = 0;
            n_x = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "n_r", "int", context__.to_vec());
            n_r = int(0);
            vals_i__ = context__.vals_i("n_r");
            pos__ = 0;
            n_r = vals_i__[pos__++];
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n_gz", "int", context__.to_vec());
            n_gz = int(0);
            vals_i__ = context__.vals_i("n_gz");
            pos__ = 0;
            n_gz = vals_i__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "n_s", "int", context__.to_vec());
            n_s = int(0);
            vals_i__ = context__.vals_i("n_s");
            pos__ = 0;
            n_s = vals_i__[pos__++];
            current_statement_begin__ = 14;
            validate_non_negative_index("X", "N", N);
            context__.validate_dims("data initialization", "X", "int", context__.to_vec(N));
            X = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("X");
            pos__ = 0;
            size_t X_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < X_k_0_max__; ++k_0__) {
                X[k_0__] = vals_i__[pos__++];
            }
            size_t X_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < X_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "X[i_0__]", X[i_0__], 1);
                check_less_or_equal(function__, "X[i_0__]", X[i_0__], n_x);
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("S", "N", N);
            context__.validate_dims("data initialization", "S", "int", context__.to_vec(N));
            S = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            size_t S_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < S_k_0_max__; ++k_0__) {
                S[k_0__] = vals_i__[pos__++];
            }
            size_t S_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < S_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "S[i_0__]", S[i_0__], 1);
                check_less_or_equal(function__, "S[i_0__]", S[i_0__], n_s);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("GZ", "N", N);
            context__.validate_dims("data initialization", "GZ", "int", context__.to_vec(N));
            GZ = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("GZ");
            pos__ = 0;
            size_t GZ_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < GZ_k_0_max__; ++k_0__) {
                GZ[k_0__] = vals_i__[pos__++];
            }
            size_t GZ_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < GZ_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "GZ[i_0__]", GZ[i_0__], 1);
                check_less_or_equal(function__, "GZ[i_0__]", GZ[i_0__], n_gz);
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("p_sr", "n_s", n_s);
            validate_non_negative_index("p_sr", "n_r", n_r);
            context__.validate_dims("data initialization", "p_sr", "matrix_d", context__.to_vec(n_s,n_r));
            p_sr = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_s, n_r);
            vals_r__ = context__.vals_r("p_sr");
            pos__ = 0;
            size_t p_sr_j_2_max__ = n_r;
            size_t p_sr_j_1_max__ = n_s;
            for (size_t j_2__ = 0; j_2__ < p_sr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_sr_j_1_max__; ++j_1__) {
                    p_sr(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "p_sr", p_sr, 0);
            current_statement_begin__ = 20;
            validate_non_negative_index("p_gzr", "n_gz", n_gz);
            validate_non_negative_index("p_gzr", "n_r", n_r);
            context__.validate_dims("data initialization", "p_gzr", "matrix_d", context__.to_vec(n_gz,n_r));
            p_gzr = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_gz, n_r);
            vals_r__ = context__.vals_r("p_gzr");
            pos__ = 0;
            size_t p_gzr_j_2_max__ = n_r;
            size_t p_gzr_j_1_max__ = n_gz;
            for (size_t j_2__ = 0; j_2__ < p_gzr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_gzr_j_1_max__; ++j_1__) {
                    p_gzr(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            check_greater_or_equal(function__, "p_gzr", p_gzr, 0);
            current_statement_begin__ = 21;
            validate_non_negative_index("p_r", "n_r", n_r);
            context__.validate_dims("data initialization", "p_r", "vector_d", context__.to_vec(n_r));
            p_r = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_r);
            vals_r__ = context__.vals_r("p_r");
            pos__ = 0;
            size_t p_r_j_1_max__ = n_r;
            for (size_t j_1__ = 0; j_1__ < p_r_j_1_max__; ++j_1__) {
                p_r(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "p_r", p_r, 0);
            current_statement_begin__ = 22;
            validate_non_negative_index("p_gz", "n_gz", n_gz);
            context__.validate_dims("data initialization", "p_gz", "vector_d", context__.to_vec(n_gz));
            p_gz = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_gz);
            vals_r__ = context__.vals_r("p_gz");
            pos__ = 0;
            size_t p_gz_j_1_max__ = n_gz;
            for (size_t j_1__ = 0; j_1__ < p_gz_j_1_max__; ++j_1__) {
                p_gz(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "p_gz", p_gz, 0);
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "n_prior_obs", "double", context__.to_vec());
            n_prior_obs = double(0);
            vals_r__ = context__.vals_r("n_prior_obs");
            pos__ = 0;
            n_prior_obs = vals_r__[pos__++];
            check_greater_or_equal(function__, "n_prior_obs", n_prior_obs, 0);
            // initialize transformed data variables
            current_statement_begin__ = 29;
            validate_non_negative_index("pr_base", "n_r", n_r);
            validate_non_negative_index("pr_base", "N", N);
            pr_base = std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(N, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_r));
            stan::math::fill(pr_base, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("alpha", "n_x", n_x);
            alpha = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_x);
            stan::math::fill(alpha, DUMMY_VAR__);
            stan::math::assign(alpha,rep_vector(n_prior_obs, n_x));
            // execute transformed data statements
            current_statement_begin__ = 32;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 33;
                stan::model::assign(pr_base, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            elt_multiply(elt_multiply(transpose(get_base1(p_sr, get_base1(S, i, "S", 1), "p_sr", 1)), transpose(get_base1(p_gzr, get_base1(GZ, i, "GZ", 1), "p_gzr", 1))), p_r), 
                            "assigning variable pr_base");
                current_statement_begin__ = 34;
                stan::model::assign(pr_base, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            divide(stan::model::rvalue(pr_base, stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), "pr_base"), sum(get_base1(pr_base, i, "pr_base", 1))), 
                            "assigning variable pr_base");
            }
            // validate transformed data
            current_statement_begin__ = 29;
            size_t pr_base_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < pr_base_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "pr_base[i_0__]", pr_base[i_0__]);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 39;
            validate_non_negative_index("p_xrgz_raw", "n_x", n_x);
            validate_non_negative_index("p_xrgz_raw", "n_gz", n_gz);
            validate_non_negative_index("p_xrgz_raw", "n_r", n_r);
            num_params_r__ += (((n_x - 1) * n_gz) * n_r);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_model_distr() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 39;
        if (!(context__.contains_r("p_xrgz_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p_xrgz_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p_xrgz_raw");
        pos__ = 0U;
        validate_non_negative_index("p_xrgz_raw", "n_x", n_x);
        validate_non_negative_index("p_xrgz_raw", "n_gz", n_gz);
        validate_non_negative_index("p_xrgz_raw", "n_r", n_r);
        context__.validate_dims("parameter initialization", "p_xrgz_raw", "vector_d", context__.to_vec(n_gz,n_r,n_x));
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > p_xrgz_raw(n_gz, std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> >(n_r, Eigen::Matrix<double, Eigen::Dynamic, 1>(n_x)));
        size_t p_xrgz_raw_j_1_max__ = n_x;
        size_t p_xrgz_raw_k_0_max__ = n_gz;
        size_t p_xrgz_raw_k_1_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < p_xrgz_raw_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < p_xrgz_raw_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_xrgz_raw_k_0_max__; ++k_0__) {
                    p_xrgz_raw[k_0__][k_1__](j_1__) = vals_r__[pos__++];
                }
            }
        }
        size_t p_xrgz_raw_i_0_max__ = n_gz;
        size_t p_xrgz_raw_i_1_max__ = n_r;
        for (size_t i_0__ = 0; i_0__ < p_xrgz_raw_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < p_xrgz_raw_i_1_max__; ++i_1__) {
                try {
                    writer__.simplex_unconstrain(p_xrgz_raw[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p_xrgz_raw: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 39;
            std::vector<std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > > p_xrgz_raw;
            size_t p_xrgz_raw_d_0_max__ = n_gz;
            size_t p_xrgz_raw_d_1_max__ = n_r;
            p_xrgz_raw.resize(p_xrgz_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < p_xrgz_raw_d_0_max__; ++d_0__) {
                p_xrgz_raw[d_0__].reserve(p_xrgz_raw_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < p_xrgz_raw_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        p_xrgz_raw[d_0__].push_back(in__.simplex_constrain(n_x, lp__));
                    else
                        p_xrgz_raw[d_0__].push_back(in__.simplex_constrain(n_x));
                }
            }
            // transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("p_xrgz", "n_x", n_x);
            validate_non_negative_index("p_xrgz", "n_r", n_r);
            validate_non_negative_index("p_xrgz", "n_gz", n_gz);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> > p_xrgz(n_gz, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(n_x, n_r));
            stan::math::initialize(p_xrgz, DUMMY_VAR__);
            stan::math::fill(p_xrgz, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 45;
            for (int i = 1; i <= n_gz; ++i) {
                current_statement_begin__ = 46;
                for (int r = 1; r <= n_r; ++r) {
                    current_statement_begin__ = 47;
                    for (int x = 1; x <= n_x; ++x) {
                        current_statement_begin__ = 48;
                        stan::model::assign(p_xrgz, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(x), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()))), 
                                    get_base1(get_base1(get_base1(p_xrgz_raw, i, "p_xrgz_raw", 1), r, "p_xrgz_raw", 2), x, "p_xrgz_raw", 3), 
                                    "assigning variable p_xrgz");
                    }
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 44;
            size_t p_xrgz_k_0_max__ = n_gz;
            size_t p_xrgz_j_1_max__ = n_x;
            size_t p_xrgz_j_2_max__ = n_r;
            for (size_t k_0__ = 0; k_0__ < p_xrgz_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < p_xrgz_j_1_max__; ++j_1__) {
                    for (size_t j_2__ = 0; j_2__ < p_xrgz_j_2_max__; ++j_2__) {
                        if (stan::math::is_uninitialized(p_xrgz[k_0__](j_1__, j_2__))) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: p_xrgz" << "[" << k_0__ << "]" << "(" << j_1__ << ", " << j_2__ << ")";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_xrgz: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            current_statement_begin__ = 56;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 57;
                lp_accum__.add(categorical_log<propto__>(get_base1(X, i, "X", 1), multiply(get_base1(p_xrgz, get_base1(GZ, i, "GZ", 1), "p_xrgz", 1), get_base1(pr_base, i, "pr_base", 1))));
            }
            current_statement_begin__ = 60;
            for (int i = 1; i <= n_gz; ++i) {
                current_statement_begin__ = 61;
                for (int r = 1; r <= n_r; ++r) {
                    current_statement_begin__ = 62;
                    lp_accum__.add(dirichlet_log<propto__>(get_base1(get_base1(p_xrgz_raw, i, "p_xrgz_raw", 1), r, "p_xrgz_raw", 2), alpha));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p_xrgz_raw");
        names__.push_back("p_xrgz");
        names__.push_back("p_xr");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_gz);
        dims__.push_back(n_r);
        dims__.push_back(n_x);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_gz);
        dims__.push_back(n_x);
        dims__.push_back(n_r);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_x);
        dims__.push_back(n_r);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_model_distr_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > > p_xrgz_raw;
        size_t p_xrgz_raw_d_0_max__ = n_gz;
        size_t p_xrgz_raw_d_1_max__ = n_r;
        p_xrgz_raw.resize(p_xrgz_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < p_xrgz_raw_d_0_max__; ++d_0__) {
            p_xrgz_raw[d_0__].reserve(p_xrgz_raw_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < p_xrgz_raw_d_1_max__; ++d_1__) {
                p_xrgz_raw[d_0__].push_back(in__.simplex_constrain(n_x));
            }
        }
        size_t p_xrgz_raw_j_1_max__ = n_x;
        size_t p_xrgz_raw_k_0_max__ = n_gz;
        size_t p_xrgz_raw_k_1_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < p_xrgz_raw_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < p_xrgz_raw_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_xrgz_raw_k_0_max__; ++k_0__) {
                    vars__.push_back(p_xrgz_raw[k_0__][k_1__](j_1__));
                }
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 44;
            validate_non_negative_index("p_xrgz", "n_x", n_x);
            validate_non_negative_index("p_xrgz", "n_r", n_r);
            validate_non_negative_index("p_xrgz", "n_gz", n_gz);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > p_xrgz(n_gz, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_x, n_r));
            stan::math::initialize(p_xrgz, DUMMY_VAR__);
            stan::math::fill(p_xrgz, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 45;
            for (int i = 1; i <= n_gz; ++i) {
                current_statement_begin__ = 46;
                for (int r = 1; r <= n_r; ++r) {
                    current_statement_begin__ = 47;
                    for (int x = 1; x <= n_x; ++x) {
                        current_statement_begin__ = 48;
                        stan::model::assign(p_xrgz, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(x), stan::model::cons_list(stan::model::index_uni(r), stan::model::nil_index_list()))), 
                                    get_base1(get_base1(get_base1(p_xrgz_raw, i, "p_xrgz_raw", 1), r, "p_xrgz_raw", 2), x, "p_xrgz_raw", 3), 
                                    "assigning variable p_xrgz");
                    }
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t p_xrgz_j_2_max__ = n_r;
                size_t p_xrgz_j_1_max__ = n_x;
                size_t p_xrgz_k_0_max__ = n_gz;
                for (size_t j_2__ = 0; j_2__ < p_xrgz_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < p_xrgz_j_1_max__; ++j_1__) {
                        for (size_t k_0__ = 0; k_0__ < p_xrgz_k_0_max__; ++k_0__) {
                            vars__.push_back(p_xrgz[k_0__](j_1__, j_2__));
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 68;
            validate_non_negative_index("p_xr", "n_x", n_x);
            validate_non_negative_index("p_xr", "n_r", n_r);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p_xr(n_x, n_r);
            stan::math::initialize(p_xr, DUMMY_VAR__);
            stan::math::fill(p_xr, DUMMY_VAR__);
            stan::math::assign(p_xr,rep_matrix(0, n_x, n_r));
            // generated quantities statements
            current_statement_begin__ = 69;
            for (int i = 1; i <= n_gz; ++i) {
                current_statement_begin__ = 70;
                stan::math::assign(p_xr, add(p_xr, multiply(get_base1(p_gz, i, "p_gz", 1), get_base1(p_xrgz, i, "p_xrgz", 1))));
            }
            // validate, write generated quantities
            current_statement_begin__ = 68;
            size_t p_xr_j_2_max__ = n_r;
            size_t p_xr_j_1_max__ = n_x;
            for (size_t j_2__ = 0; j_2__ < p_xr_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_xr_j_1_max__; ++j_1__) {
                    vars__.push_back(p_xr(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_model_distr";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p_xrgz_raw_j_1_max__ = n_x;
        size_t p_xrgz_raw_k_0_max__ = n_gz;
        size_t p_xrgz_raw_k_1_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < p_xrgz_raw_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < p_xrgz_raw_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_xrgz_raw_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_xrgz_raw" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_xrgz_j_2_max__ = n_r;
            size_t p_xrgz_j_1_max__ = n_x;
            size_t p_xrgz_k_0_max__ = n_gz;
            for (size_t j_2__ = 0; j_2__ < p_xrgz_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_xrgz_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_xrgz_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p_xrgz" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t p_xr_j_2_max__ = n_r;
        size_t p_xr_j_1_max__ = n_x;
        for (size_t j_2__ = 0; j_2__ < p_xr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_xr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_xr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p_xrgz_raw_j_1_max__ = (n_x - 1);
        size_t p_xrgz_raw_k_0_max__ = n_gz;
        size_t p_xrgz_raw_k_1_max__ = n_r;
        for (size_t j_1__ = 0; j_1__ < p_xrgz_raw_j_1_max__; ++j_1__) {
            for (size_t k_1__ = 0; k_1__ < p_xrgz_raw_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_xrgz_raw_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_xrgz_raw" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_xrgz_j_2_max__ = n_r;
            size_t p_xrgz_j_1_max__ = n_x;
            size_t p_xrgz_k_0_max__ = n_gz;
            for (size_t j_2__ = 0; j_2__ < p_xrgz_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_xrgz_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_xrgz_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p_xrgz" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t p_xr_j_2_max__ = n_r;
        size_t p_xr_j_1_max__ = n_x;
        for (size_t j_2__ = 0; j_2__ < p_xr_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_xr_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_xr" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_model_distr_namespace::model_model_distr stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
